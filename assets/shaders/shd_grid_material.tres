[gd_resource type="VisualShader" load_steps=5 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
output_port_for_preview = 0
uniform_name = "GridTexture"

[sub_resource type="VisualShaderNodeVec3Uniform" id=2]
uniform_name = "UV_scale"

[sub_resource type="VisualShaderNodeInput" id=3]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=4]
operator = 2

[resource]
resource_local_to_scene = true
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec3 UV_scale;
uniform sampler2D GridTexture;



void vertex() {
// Output:0

}

void fragment() {
// VectorUniform:3
	vec3 n_out3p0 = UV_scale;

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// VectorOp:5
	vec3 n_out5p0 = n_out3p0 * n_out4p0;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(GridTexture, n_out5p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -306.75, 0 )
nodes/fragment/0/position = Vector2( 400, 140 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 140, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -260, 100 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -260, 180 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -40, 80 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 5, 0, 2, 0, 2, 0, 0, 0, 4, 0, 5, 1 )
